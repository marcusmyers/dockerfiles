#!/usr/bin/env php

<?php
require "vendor/autoload.php";
use Illuminate\Support\Collection;

class Dockerfile {
    protected $file;
    protected $arrFileContent;
    protected $arrVersions;

    public function __construct(String $filepath)
    {
        $this->file = $filepath;
        if(file_exists($this->dir() . "/VERSIONS")) {
            $this->arrVersions = file($this->dir()."/VERSIONS");
        }
    }

    public function dir()
    {
        return pathinfo($this->file, PATHINFO_DIRNAME);
    }

    public function dependent_image()
    {
        $this->arrFileContent = file($this->file)[0];
        return $this->arrFileContent;
    }

    public function dependent_on_marcusmyers()
    {
        if(preg_match("/marcusmyers/", $this->dependent_image())){
            return true;
        } else {
            return false;
        }
    }

    public function image_tag($tag="")
    {
        if ($tag != "" ) {
            return "marcusmyers/". basename($this->dir()) . ":" . trim($tag);
        } else {
            return "marcusmyers/". ( strpos($this->dir(), "/") ? preg_replace("/\//", ":", $this->dir()) : $this->dir() . ":latest");
        }
    }

    public function build_push_image()
    {
        if(count($this->arrVersions) > 0) {
            foreach($this->arrVersions as $version) {
              system("docker build --build-arg VERSION=". trim($version) ." -t " . $this->image_tag($version) . " " . $this->dir() . " && docker push " . $this->image_tag($version));
            }
        } else {
            system("docker build -t ". $this->image_tag() . " " . $this->dir() . " && docker push " . $this->image_tag());
        }
    }

    public function cleanup()
    {
        if($this->arrVersions) {
            foreach($this->arrVersions as $version) {
                system("docker rmi " . $this->image_tag($version));
            }
        } else {
            system("docker rmi ". $this->image_tag());
        }
    }
}

$dfiles = Collection::make(array_merge(glob('*/Dockerfile'), glob('*/*/Dockerfile')));

$dockerfiles = $dfiles->map(function ($file) {
    return new Dockerfile($file);
});

$marcusmyers_dependent_images = $dockerfiles->filter( function($file) {
    return $file->dependent_on_marcusmyers();
});

$non_marcusmyers_dependencies = $dockerfiles->reject( function($file) {
    return $file->dependent_on_marcusmyers();
});

echo "INFO: Building non-dependent images. . .\n";
$non_marcusmyers_dependencies->each(function ($d) use ($table1) {
    $d->build_push_image();
});

sleep(5);

echo "INFO: Building images with dependencies. . .\n";
$marcusmyers_dependent_images->each(function ($d) use ($table2) {
    $d->build_push_image();
});

echo "INFO: Cleaning up all images. . .\n";
$dockerfiles->each(function ($f) {
  $f->cleanup();
});
